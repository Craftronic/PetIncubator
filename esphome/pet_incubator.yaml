esp32:
  board: esp32-s3-devkitc-1
  flash_size: 16MB
  framework:
    type: arduino

psram:
  mode: octal
  speed: 80MHz

esphome:
  name: pet-incubator
  friendly_name: PetIncubator
  platformio_options:
    board_build.f_cpu : 240000000L
  libraries:
    - m5stack/M5Unified@^0.1.12
  includes:
    - ../sounds/headers/click_1.h
    - ../sounds/headers/click_2.h
    - ../sounds/headers/click_3.h
    - ../sounds/headers/click_4.h
    - ../sounds/headers/click_5.h
    - ../sounds/headers/click_6.h
    - ../sounds/headers/swipe1.h
  on_boot:
      priority: 600
      then: 
        - script.execute:
            id: m5_display_set_brightness
            value: 100
        - script.execute: draw_display
        - delay: 1s # needs some delay before m5 speaker is fully initiated and the volume can be set
        - script.execute: m5_speaker_update_volume
        - delay: 4s
        - lambda: |-
            id(init_in_progress) = false;
        - script.execute: draw_display

external_components:
  - source:
      type: git
      url: https://github.com/minovap/M5CoreS3-Esphome
    refresh: 0s

api:
ota:
logger:
captive_portal:
web_server:
  port: 80

wifi:
  ap:
    ssid: "M5Stack CoreS3 Test"


script:
  - id: draw_display
    then:
      - lambda: |-
          auto& lcd = id(m5cores3_lcd);

          if (!id(init_in_progress)) {
            lcd->show_page(main_page);
          } else {
            lcd->show_page(loading);
          }

          lcd->update();
  - id: m5_display_set_brightness
    parameters:
      value: int
    then:
      - lambda: M5.Display.setBrightness(value);
  - id: m5_speaker_update_volume
    then:
      - lambda: M5.Speaker.setVolume(id(speaker_volume)  * 12);
  - id: play_sound
    parameters:
      sound_number: int
    then:
      - speaker.play: !lambda |-
          std::vector<uint8_t> data;
          switch(sound_number) {
              case 1:
                  data = std::vector<uint8_t>(std::begin(wav_click_1_raw), std::end(wav_click_1_raw));
                  break;
              case 2:
                  data = std::vector<uint8_t>(std::begin(wav_click_2_raw), std::end(wav_click_2_raw));
                  break;
              case 3:
                  data = std::vector<uint8_t>(std::begin(wav_click_3_raw), std::end(wav_click_3_raw));
                  break;
              case 4:
                  data = std::vector<uint8_t>(std::begin(wav_click_4_raw), std::end(wav_click_4_raw));
                  break;
              case 5:
                  data = std::vector<uint8_t>(std::begin(wav_click_5_raw), std::end(wav_click_5_raw));
                  break;
              case 6:
                  data = std::vector<uint8_t>(std::begin(wav_click_6_raw), std::end(wav_click_6_raw));
                  break;
              case 7:
                  data = std::vector<uint8_t>(std::begin(wav_swipe1_raw), std::end(wav_swipe1_raw));
                  break;
              default:
                  // Handle the case where n is not valid
                  data = std::vector<uint8_t>(); // or some default sound
          }
          return data;

globals:
  - id: speaker_volume
    type: int
    restore_value: no
    initial_value: '5'
  - id: init_in_progress
    type: bool
    restore_value: no
    initial_value: 'true'

binary_sensor:
  # Button 1
  - platform: touchscreen
    name: Button 1
    x_min: 1
    x_max: 106
    y_min: 1
    y_max: 80
    on_press:
      then:
        - logger.log: "Clicked on Button 1"
        - script.execute:
            id: play_sound
            sound_number: 1

  # Button 2
  - platform: touchscreen
    name: Button 2
    x_min: 107
    x_max: 213
    y_min: 0
    y_max: 80
    on_press:
      then:
        - logger.log: "Clicked on Button 2"
        - script.execute:
            id: play_sound
            sound_number: 2

  # Button 3
  - platform: touchscreen
    name: Button 3
    x_min: 214
    x_max: 320
    y_min: 0
    y_max: 80
    on_press:
      then:
        - logger.log: "Clicked on Button 3"
        - script.execute:
            id: play_sound
            sound_number: 3

  # Button 4
  - platform: touchscreen
    name: Button 4
    x_min: 0
    x_max: 106
    y_min: 81
    y_max: 160
    on_press:
      then:
        - logger.log: "Clicked on Button 4"
        - script.execute:
            id: play_sound
            sound_number: 4

  # Button 5
  - platform: touchscreen
    name: Button 5
    x_min: 107
    x_max: 213
    y_min: 81
    y_max: 160
    on_press:
      then:
        - logger.log: "Clicked on Button 5"
        - script.execute:
            id: play_sound
            sound_number: 5

  # Button 6
  - platform: touchscreen
    name: Button 6
    x_min: 214
    x_max: 320
    y_min: 81
    y_max: 160
    on_press:
      then:
        - logger.log: "Clicked on Button 6"
        - script.execute:
            id: play_sound
            sound_number: 6

  - platform: touchscreen
    name: Volume Minus
    x_min: 0
    x_max: 80
    y_min: 162
    y_max: 242
    on_press:
      then:
        - logger.log: "Volume Minus pressed"
        - lambda: |-
            if (id(speaker_volume) > 0) {
              id(speaker_volume) -= 1;
            }
        - script.execute: m5_speaker_update_volume
        - script.execute:
            id: play_sound
            sound_number: 3
        - script.execute: draw_display

  - platform: touchscreen
    name: Volume Plus
    x_min: 240
    x_max: 320
    y_min: 162
    y_max: 242
    on_press:
      then:
        - logger.log: "Volume Plus pressed"
        - lambda: |-
            if (id(speaker_volume) < 10) {
              id(speaker_volume) += 1;
            }
        - script.execute: m5_speaker_update_volume
        - script.execute:
            id: play_sound
            sound_number: 3
        - script.execute: draw_display

image:
  - file: mdi:cog-outline
    id: system_settings_icon
    resize: 20x20
  - file: mdi:information-outline
    id: system_info_icon
    resize: 20x20
  - file: mdi:thermometer
    id: thermometer_icon
    resize: 30x30
  - file: mdi:water-percent
    id: water_percent_icon
    resize: 30x30
  - file: mdi:lightbulb-outline
    id: lightbulb_icon
    resize: 30x30
  - file: mdi:fan
    id: fan_icon
    resize: 30x30
  - file: mdi:brightness-6
    id: brightness_icon
    resize: 30x30
  - file: mdi:volume-high
    id: volume_icon
    resize: 30x30
  - file: mdi:power
    id: power_icon
    resize: 30x30
  - file: mdi:volume-minus
    id: volume_minus
    resize: 80x80
  - file: mdi:volume-plus
    id: volume_plus
    resize: 80x80
  - file: "../images/splash_screen_320x240.png"
    id: splash_screen
    resize: 320x240
    type: RGB24

font:
  - file: "gfonts://Roboto"
    id: roboto
    size: 36

display:
  - platform: m5cores3_display
    model: ILI9342
    dc_pin: 35
    update_interval: never
    id: m5cores3_lcd
    pages:
      - id: loading
        lambda: it.image(0, 0, id(splash_screen));
      - id: main_page
        lambda: |-
          // Define colors
          auto red = Color(255, 0, 0);
          auto green = Color(0, 255, 0);
          auto blue = Color(0, 0, 255);
          auto white = Color(255, 255, 255);
          auto black = Color(0, 0, 0);
          auto grey = Color(200, 200, 200);

          // Top Bar
          it.filled_rectangle(0, 0, it.get_width(), 24, grey); // Background for Top Bar
          it.image(5, 2, id(system_settings_icon)); // System settings icon
          it.image(it.get_width() - 29, 2, id(system_info_icon)); // System info icon

          // Main Section
          // Temperature Display
          it.printf(10, 30, id(roboto), black, "Temp: %.1fÂ°C", 22);
          it.image(10, 50, id(thermometer_icon));
          // Humidity Display
          it.printf(10, 90, id(roboto), black, "Humidity: %.1f%%", 47);
          it.image(10, 110, id(water_percent_icon));
          // Lighting Control Shortcut
          it.image(10, 150, id(lightbulb_icon));
          // Fan Status Shortcut
          it.image(10, 190, id(fan_icon));

          // Bottom Bar
          it.filled_rectangle(0, it.get_height() - 40, it.get_width(), 40, grey); // Background for Bottom Bar
          // Display Brightness Control
          it.image(10, it.get_height() - 38, id(brightness_icon));
          // Volume Control
          it.image(60, it.get_height() - 38, id(volume_icon));

      - id: page1
        lambda: |-
          // Define colors
          auto red = Color(255, 0, 0);
          auto green = Color(0, 255, 0);
          auto blue = Color(0, 0, 255);
          auto white = Color(255, 255, 255);

          // Draw filled rectangles for buttons
          it.filled_rectangle(0, 0, 106, 80, red);    // Rectangle for Button 1
          it.filled_rectangle(107, 0, 106, 80, green);  // Rectangle for Button 2
          it.filled_rectangle(214, 0, 106, 80, blue);  // Rectangle for Button 3
          it.filled_rectangle(0, 81, 106, 80, white);   // Rectangle for Button 4
          it.filled_rectangle(107, 81, 106, 80, red); // Rectangle for Button 5
          it.filled_rectangle(214, 81, 106, 80, green); // Rectangle for Button 6
          it.image(0, 162, id(volume_minus));
          it.printf(150, 180, id(roboto), white, "%d", id(speaker_volume));
          it.image(240, 162, id(volume_plus));


touchscreen:
  - platform: m5cores3_touchscreen
    update_interval: 20ms
    on_touch:
      - lambda: |-
          if (touch.id > 0) {
            id(play_sound)->execute(7);
            if (touch.id == 1) {
              ESP_LOGD("Touch", "Swipe up detected");
            } else if (touch.id == 2) {
              ESP_LOGD("Touch", "Swipe right detected");
            } else if (touch.id == 3) {
              ESP_LOGD("Touch", "Swipe down detected");
            } else if (touch.id == 4) {
              ESP_LOGD("Touch", "Swipe left detected");
            }
          }
#    on_touch:
#      - logger.log:
#          format: Touch %d at (%d, %d)
#          args: [touch.id, touch.x, touch.y]

# 
# Audio
# 
board_m5cores3:
m5cores3_audio:
  id: m5cores3_audio_1

microphone:
  - platform: m5cores3_audio
    m5cores3_audio_id: m5cores3_audio_1
    id: m5cores3_mic
    adc_type: external
    i2s_din_pin: 14
    pdm: false

speaker:
  - platform: m5cores3_audio
    m5cores3_audio_id: m5cores3_audio_1
    id: m5cores3_spk
    dac_type: external
    i2s_dout_pin: 13
    mode: mono
